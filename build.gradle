plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'maven-publish'
    id 'se.patrikerdes.use-latest-versions' version '0.2.18'

    id 'checkstyle'
    id 'jacoco'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.github.ben-manes.versions' version '0.51.0'
    id 'org.owasp.dependencycheck' version '9.2.0'
    id 'com.github.kt3k.coveralls' version '2.12.2'
    id 'org.sonarqube' version '5.1.0.4882'
    id "info.solidsoft.pitest" version '1.15.0' apply(false)
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.9"
    id 'org.springframework.boot' version '2.7.18'
}

apply plugin: 'java-library'
apply plugin: 'idea'
apply plugin: "org.sonarqube"
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'info.solidsoft.pitest'

def buildNumber = System.getenv("RELEASE_VERSION")?.replace("refs/tags/", "") ?: "1.0.0"

group 'com.github.hmcts'

version buildNumber

def gitRepo = "https://github.com/hmcts/civil-sdt-common.git"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

ext {
    junitVersion           = '5.11.1'
    junitPlatformVersion   = '1.11.1'
    log4jVersion = '2.24.1'
    testcontainers = '1.17.5'
    cxfVersion = '3.6.4'
    jaxwsVersion = "2.3.1"
    limits = [
            'instruction': 99,
            'branch'     : 99,
            'line'       : 99,
            'complexity' : 89,
            'method'     : 99,
            'class'      : 90
    ]
}

ext.libraries = [
        junit5: [
                "org.junit.jupiter:junit-jupiter-api:${junitVersion}",
                "org.junit.jupiter:junit-jupiter-engine:${junitVersion}",
                "org.junit.jupiter:junit-jupiter-params:${junitVersion}",
                "org.junit.platform:junit-platform-commons:${junitPlatformVersion}",
                "org.junit.platform:junit-platform-engine:${junitPlatformVersion}"
        ]
]

sonarqube {
    properties {
        property "sonar.sources", "src"
        property "sonar.tests", "src"
        property "sonar.test.inclusions", "**/unit-test/**,**/integ-test/**"
        property 'sonar.exclusions', "**/**.sql"
        property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.outputLocation.get()}"
    }
}

afterEvaluate {
    jacocoTestReport {
        reports {
            // XML required by coveralls and for the below coverage checks
            // and html are generated by default
            xml.required = true
            html.required = true
        }

        doLast {
            def report = layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml").get().asFile
            logger.lifecycle("Checking coverage results: ${report}")

            def parser = new XmlParser()
            parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)
            parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
            def results = parser.parse(report)

            def percentage = {
                def covered = it.'@covered' as Double
                def missed = it.'@missed' as Double
                ((covered / (covered + missed)) * 100).round(2)
            }

            def counters = results.counter
            def metrics = [:]
            metrics << [
                    'class'      : percentage(counters.find { it.'@type'.equals('CLASS') })
            ]

            def failures = []
            metrics.each {
                def limit = limits[it.key]
                if (it.value < limit) {
                    failures.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
                }
            }

            if (failures) {
                logger.quiet("------------------ Code Coverage Failed -----------------------")
                failures.each {
                    logger.quiet(it)
                }
                logger.quiet("---------------------------------------------------------------")
                throw new GradleException("Code coverage failed")
            } else{
                logger.quiet("Passed Code Coverage Checks")
            }
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

task testJar(type: Jar, dependsOn: testClasses) {
    archiveClassifier = 'test'
    from sourceSets.test.output
}

tasks.withType(Test) {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
    }
}

Set subProjectsWithTest = subprojects.findAll { sProject ->
    sProject.tasks.matching { it.name == "test" }
}

task codeCoverageReport(type: JacocoReport, dependsOn: [subProjectsWithTest*.test, subProjectsWithTest*.jacocoTestReport]) {

    // Gather execution data from all subprojects
    // (change this if you e.g. want to calculate unit test/integration test coverage separately)
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    // Add all relevant sourcesets from the subprojects
    allprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        csv.required = false
        html.required = true
        html.outputLocation = layout.buildDirectory.dir("reports/jacoco/html")
        xml.required = true
        xml.outputLocation = layout.buildDirectory.file("reports/jacoco/jacocoTestReport.xml")
    }
}

// for cnp pipeline
tasks.register('dependencyCheck') { dependsOn dependencyCheckAnalyze }

configurations { codacy }

dependencies {
    codacy 'com.github.codacy:codacy-coverage-reporter:-SNAPSHOT'
}

tasks.register('sendCoverageToCodacy', JavaExec) {
    dependsOn jacocoTestReport
    mainClass = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy
    args = [
            "report",
            "-l",
            "Java",
            "-r",
            "${layout.buildDirectory.get()}/reports/jacoco/jacocoTestReport.xml"
    ]
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives testJar
}

bootJar {
    enabled = false
}

dependencies {
    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:30.1.1-jre'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4jVersion
    implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4jVersion
    implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.8.0'
    implementation group: 'org.springframework', name: 'spring-jms', version: '5.3.39'
    implementation group: 'org.apache.cxf', name: 'cxf-spring-boot-starter-jaxws', version: cxfVersion
    implementation group: 'org.apache.cxf', name: 'cxf-rt-transports-http-jetty', version: cxfVersion
    implementation group: 'org.apache.cxf', name: 'cxf-rt-features-logging', version: cxfVersion
    implementation group: 'javax.jws', name: 'javax.jws-api', version: '1.1'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web-services'
    implementation(group: 'org.springframework.boot', name: 'spring-boot-starter-activemq') {
        exclude group: 'org.apache.activemq', module: 'activemq-broker'
    }
    implementation 'org.hibernate:hibernate-core:5.6.15.Final'
    implementation group: 'xerces', name: 'xercesImpl', version: '2.12.2'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.18.0'
    implementation(group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc') {
        exclude group: 'org.apache.tomcat', module: 'tomcat-jdbc'
    }

    testImplementation libraries.junit5
    testImplementation group: 'info.solidsoft.gradle.pitest', name: 'gradle-pitest-plugin', version: '1.15.0'
    testImplementation group: 'org.jdom', name: 'jdom2', version: '2.0.6.1'
    testImplementation 'org.mockito:mockito-core:5.13.0'
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: '5.2.0'
    testImplementation 'org.springframework:spring-test:6.1.13'
    testImplementation group: 'xerces', name: 'xercesImpl', version: '2.12.2'
    testImplementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4jVersion
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: 'junit', module: 'junit'
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'
    api 'org.apache.commons:commons-lang3:3.17.0'
    api 'commons-io:commons-io:2.17.0'
}

subprojects {
    group 'com.github.hmcts'
    version buildNumber
    apply plugin: 'java-library'
    apply plugin: 'idea'
    apply plugin: "org.sonarqube"
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.github.ben-manes.versions'

    configurations {
        testUnitImplementation.extendsFrom testImplementation
        testUnitImplementation.extendsFrom runtimeOnly

        testIntegrationImplementation.extendsFrom testImplementation
        testIntegrationImplementation.extendsFrom runtimeOnly
    }

    dependencies {
        // This dependency is used internally, and not exposed to consumers on their own compile classpath.
        implementation 'com.google.guava:guava:30.1.1-jre'
        implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4jVersion
        implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4jVersion
        implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.8.0'
        implementation group: 'org.springframework', name: 'spring-jms', version: '5.3.39'
        implementation group: 'org.apache.cxf', name: 'cxf-spring-boot-starter-jaxws', version: cxfVersion
        implementation group: 'org.apache.cxf', name: 'cxf-rt-transports-http-jetty', version: cxfVersion
        implementation group: 'org.apache.cxf', name: 'cxf-rt-features-logging', version: cxfVersion
        implementation group: 'javax.jws', name: 'javax.jws-api', version: '1.1'
        implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web-services'
        implementation(group: 'org.springframework.boot', name: 'spring-boot-starter-activemq') {
            exclude group: 'org.apache.activemq', module: 'activemq-broker'
        }
        implementation 'org.hibernate:hibernate-core:5.6.15.Final'
        implementation group: 'xerces', name: 'xercesImpl', version: '2.12.2'
        implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.18.0'
        implementation(group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc') {
            exclude group: 'org.apache.tomcat', module: 'tomcat-jdbc'
        }

        testImplementation libraries.junit5
        testImplementation group: 'info.solidsoft.gradle.pitest', name: 'gradle-pitest-plugin', version: '1.15.0'
        testImplementation group: 'org.jdom', name: 'jdom2', version: '2.0.6.1'
        testImplementation 'org.mockito:mockito-core:5.13.0'
        testImplementation group: 'org.mockito', name: 'mockito-inline', version: '5.2.0'
        testImplementation 'org.springframework:spring-test:6.1.13'
        testImplementation group: 'xerces', name: 'xercesImpl', version: '2.12.2'
        testImplementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4jVersion
        testImplementation("org.springframework.boot:spring-boot-starter-test") {
            exclude group: 'junit', module: 'junit'
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }

        // This dependency is exported to consumers, that is to say found on their compile classpath.
        api 'org.apache.commons:commons-math3:3.6.1'
        api 'org.apache.commons:commons-lang3:3.17.0'
        api 'commons-io:commons-io:2.17.0'
    }

    bootJar {
        enabled = false
    }

    jar {
        enabled = true
        archiveClassifier = ''
    }

    tasks.withType(Test) {
        useJUnitPlatform()
        reports.html.required = false

        testLogging {
            exceptionFormat = 'full'
        }
    }

    sonarqube {
        skipProject = true
    }

    dependencyCheck {
        suppressionFile = "${rootDir}/config/owasp/suppressions.xml"
    }

    configurations {
        all {
            exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
        }
    }
    check.dependsOn test
    jacocoTestReport.mustRunAfter test
}

dependencies {
    api project(':dao-api')
    api project(':domain')
    api project(':handlers-api')
    api project(':interceptors')
    api project(':producers-api')
    api project(':services-api')
    api project(':utils')

    testImplementation(project(":domain"))
    testImplementation(project(":producers-api"))
    testImplementation(project(":utils"))
}

publishing {
    publications {
        "$project.name"(MavenPublication) {
            groupId project.group
            artifactId project.name
            artifact sourcesJar
            artifact javadocJar
            artifact testJar
            version project.version
            from components.java
        }
    }
}

tasks.jar {
    enabled = true
    archiveClassifier = ''
    archivesBaseName = "civil-sdt-common"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
