plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'maven-publish'
    id 'se.patrikerdes.use-latest-versions' version '0.2.7'

    id 'checkstyle'
    id 'jacoco'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'com.github.ben-manes.versions' version '0.44.0'
    id 'org.owasp.dependencycheck' version '8.0.2'
    id 'com.github.kt3k.coveralls' version '2.8.2'
    id 'org.sonarqube' version '3.4.0.2513'
    id "com.jfrog.bintray" version "1.8.5" apply false
    id "info.solidsoft.pitest" version '1.5.1' apply(false)
    id "org.jetbrains.gradle.plugin.idea-ext" version "0.7"
    id 'org.springframework.boot' version '2.7.7'
}

apply plugin: 'java-library'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: "org.sonarqube"
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.github.ben-manes.versions'

def buildNumber = System.getenv("RELEASE_VERSION")?.replace("refs/tags/", "") ?: "1.0.0"

group 'com.github.hmcts'

version buildNumber

def gitRepo = "https://github.com/hmcts/civil-sdt-common.git"

def pomConfig = {
    licenses {
        license {
            name "MIT License"
            url "http://www.opensource.org/licenses/mit-license.php"
            distribution "repo"
        }
    }

    scm {
        url "https://github.com/hmcts/civil-sdt.git"
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://jitpack.io'
    }
}

ext {
    junitVersion           = '5.7.2'
    junitPlatformVersion   = '1.7.2'
    log4jVersion = '2.17.1'
    testcontainers = '1.17.5'
    cxfVersion = '3.5.4'
    jaxwsVersion = "2.3.1"
}

ext.libraries = [
        junit5: [
                "org.junit.jupiter:junit-jupiter-api:${junitVersion}",
                "org.junit.jupiter:junit-jupiter-engine:${junitVersion}",
                "org.junit.jupiter:junit-jupiter-params:${junitVersion}",
                "org.junit.platform:junit-platform-commons:${junitPlatformVersion}",
                "org.junit.platform:junit-platform-engine:${junitPlatformVersion}"
        ]
]


jar {
    baseName = "civil-sdt-common"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

tasks.withType(Test) {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
    }
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

tasks.named('test') {
    // Use junit platform for unit tests.
    useJUnitPlatform()
}

bootJar {
    enabled = false
}

dependencies {

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:30.0-jre'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4jVersion
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: log4jVersion
    implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4jVersion
    implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.6.7'
    implementation group: 'org.springframework', name: 'spring-jms', version: '5.3.23'
    implementation group: 'org.apache.cxf', name: 'cxf-spring-boot-starter-jaxws', version: cxfVersion
    implementation group: 'org.apache.cxf', name: 'cxf-rt-transports-http-jetty', version: cxfVersion
    implementation group: 'org.apache.cxf', name: 'cxf-rt-features-logging', version: cxfVersion
    implementation group: 'javax.jws', name: 'javax.jws-api', version: '1.1'
    implementation(group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc') {
        exclude group: 'org.apache.tomcat', module: 'tomcat-jdbc'
    }

    testImplementation libraries.junit5
    testImplementation group: 'info.solidsoft.gradle.pitest', name: 'gradle-pitest-plugin', version: '1.4.0'
    testImplementation group: 'org.easymock', name: 'easymock', version: '5.0.1'
    testImplementation group: 'org.jdom', name: 'jdom2', version: '2.0.6.1'
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: '3.11.1'
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: '3.11.1'
    testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.9'
    testImplementation group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.9'
    testImplementation group: 'org.dbunit', name: 'dbunit', version: '2.7.3'
    implementation 'org.slf4j:slf4j-api:2.0.7'
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

subprojects { subproject ->

    sourceSets {
        unitTest {
            java {
                compileClasspath += main.output
                runtimeClasspath += main.output
                srcDir file('src/unit-test/java')
            }
            resources.srcDir file('src/unit-test/resources')
        }

        integTest {
            java {
                compileClasspath += main.output
                runtimeClasspath += main.output
                srcDir file('src/integ-test/java')
            }
            resources.srcDir file('src/integ-test/resources')
        }
    }

    task integration(type: Test) {
        description = "Runs integration tests"
        group = "Verification"
        testClassesDirs = subproject.sourceSets.integTest.output.classesDirs
        classpath = subproject.sourceSets.integTest.runtimeClasspath
        failFast = true
    }

    task unitTest(type: Test) {
        description = "Runs Tests"
        group = "Verification"
        testClassesDirs = subproject.sourceSets.unitTest.output.classesDirs
        classpath = subproject.sourceSets.unitTest.runtimeClasspath
        failFast = true
    }
}

tasks.named('test') {
    // Use junit platform for unit tests.
    useJUnitPlatform()
}
